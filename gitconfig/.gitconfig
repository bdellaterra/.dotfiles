[user]
    email = bdellaterra@users.noreply.github.com
    name = Brian Dellaterra
[core]
    autocrlf = false
    safecrlf = false
    ignorecase = false
    excludesfile = ~/.gitignore
[branch]
    autosetuprebase = always
[diff]
    renames = copies
[color]
    ui = true
[alias]

    # Refs:
    # https://www.atlassian.com/blog/git/advanced-git-aliases
    # https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html

    # list aliases
    aliases = "!git config -l | grep alias | cut -c 7-"

    # add
    a = add

    # add including deletions
    ad = add -u

    # add all
    aa = !git add . && git commit -am

    # add interactive
    ai = add -i

    # add interactive (straight to patch mode)
    ap = add -p

    # branch
    b = branch 

    # branch delete
    bd = branch -d

    # branch move
    bm = branch -m

    # show current branch
    bs = symbolic-ref --short HEAD 

    # commit (check in)
    c = commit
    ci = commit

    # commit amend
    ca = commit --amend

    # commit amend w/ message
    cam = commit --amend -m

    # commit amend all
    caa = commit -a --amend -C HEAD

    # commit amend all w/ message
    caa = commit -a --amend -C HEAD -m

    # config
    cf = config

    # config global
    cfg = config --global

    # config values
    cfv = config --list

    # clone
    cl = clone

    # commit w/ message
    cm = commit -m

    # checkout
    co = checkout

    # checkout branch
    cob = checkout -b

    # checkout tag
    cot = "!f() { git checkout tags/$1; }; f"

    # checkout files
    cof = "!f() { git checkout -- $@; }; f"

    # diff
    d = diff --word-diff

    # diff cached
    dc = diff --cached

    # diff double-check (before push)
    dd = diff --cached origin/master

    # diff names-only
    dn = diff --name-only

    # diff stat
    ds = diff --stat

    # edit config
    ec = config --global -e

    # fetch
    f = fetch

    # fetch tags
    ft = fetch --tags

    # help
    h = help

    # init
    i = init

    # log (short)
    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --graph --decorate --date=short

    # log (long)
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    # merge
    m = merge

    # pull
    pl = pull

    # push current branch
    pu = push origin HEAD

    # push all branches
    pa = push -u origin --all

    # push branch
    pb = push -u origin

    # cherry pick
    pk = cherry-pick

    # push tags
    pt = git push --tags origin

    # rebase
    r = rebase

    # rebase (interactive)
    ri = rebase -i

    # reflog
    rl = reflog

    # reset (soft)
    rs = reset --soft HEAD~

    # reset (mixed)
    rsm = reset --mixed HEAD~

    # reset (hard)
    rsh = !git fetch origin && git reset --hard origin/master

    # remote add
    ra = remote add

    # remote add origin
    rao = remote add origin

    # remote reset url
    rr = remote set-url

    # remote verbose
    rv = remote -v

    # short status
    s = status -s

    # show
    sh = show

    # status
    st = status

    # stash save
    ss = stash save

    # stash show
    ssh = stash show

    # stash list
    sl = stash list

    # stash apply
    sa = stash apply

    # stash pop
    sp = stash pop

    # stash keeping indexed (staged) files
    ski = stash save --keep-index

    # submodule
    sm = submodule

    # submodule add
    sma = submodule add

    # submodule init
    smi = !git submodule init && git submodule update

    # submodule update
    smu = submodule foreach git pull origin master

    # tag
    t = tag

    # show current tag
    ts = describe --tags --abbrev=0

    # unstage
    u = reset HEAD

    # undo last commit
    un = reset HEAD^

    # tag add (annotate)
    ta = tag -a

    # remove local branches that have already been merged to master (Credit to haacked)
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

    # see what new commits have been created by the last command
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

    # Show all refs in local repo
    refs = show-ref --head --dereference


    # GitFlow
    # ref: https://github.com/nvie/gitflow

    # initialize a new repo with flow branches
    if = flow init

    # list feature branches
    fb = flow feature

    # start a feature branch
    fbs = flow feature start

    # finish a feature branch
    fbf = flow feature finish

    # push a feature branch to the remote repo
    fbpu = flow feature publish

    # pull a feature branch from a remote repo
    fbpl = flow feature publish

    # list release branches
    rb = flow release

    # start a release branch
    rbs = flow release start

    # finish a release branch
    rbf = flow release finish

    # list hotfix branches
    hb = flow hotfix

    # start a hotfix branch
    hbs = flow hotfix start

    # finish a hotfix branch
    hbf = flow hotfix finish

    # list support branches
    sb = flow support

    # start a support branch
    sbs = flow support start


