
# Reduce delay
set -sg escape-time 1

# Watch focus gain and loss events
set -g focus-events on

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

# Index windows/panes from 1 instead of zero
set -g base-index 1
set -g pane-base-index 1
bind 0 select-window -t :10
set -g renumber-windows on

# Increase history line limit
set -g history-limit 10000

# Highlight status line for windows with activity
setw -g monitor-activity on
set -g visual-activity off

# Disable escape-key delay. Increases Vim responsiveness.
# From Ton van den Heuvel, 2011, http://superuser.com/questions/252214/slight-delay-when-switching-modes-in-vim-using-tmux-or-screen
set -sg escape-time 0

# 256 terminal colors
set -g default-terminal "screen-256color"
set-window-option -g xterm-keys on

# Enable vi-style keys
set -g status-keys vi
setw -g mode-keys vi

# Enable mouse behaviors
# (If awk exits with status 0, if-shell evaluates to true)
# tmux < v2.1:
if-shell "tmux -V | awk '{exit !($2 < \"2.1\")}'" \
    "setw -g mode-mouse on ; set -g mouse-select-pane on ; set -g mouse-resize-pane on ; set -g mouse-select-window on ;"
# tmux >= v2.1:
if-shell "tmux -V | awk '{exit !($2 >= \"2.1\")}'" \
    "set -g mouse on ;"

# Pipe the selected text from copy mode to xclip
# From Josh Brobst, 2017, https://unix.stackexchange.com/questions/348913/copy-selection-to-a-clipboard-in-tmux
# tmux < v2.4:
if-shell "tmux -V | awk '{exit !($2 < \"2.4\")}'" \
    "bind-key -t vi-copy MouseDragEnd1Pane copy-pipe \"xclip -selection clipboard -i\" ; bind-key -t emacs-copy MouseDragEnd1Pane copy-pipe \"xclip -selection clipboard -i\" ;"
# tmux >= v2.4:
if-shell "tmux -V | awk '{exit !($2 >= \"2.4\")}'" \
    "bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -selection clipboard -i\" ; bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel \"xclip -selection clipboard -i\" ;"


# MAPPINGS

# Remap Prefix to Ctrl-a instead of Ctrl-b
set -g prefix C-a
unbind C-b

# To send Ctrl-a to an app running in tmux, hit Ctrl-a twice.
bind C-a send-prefix

# Prefix r - reload local tmux config
bind r source-file ~/.tmux.conf \; display "Reloaded local tmux configuration."

# Create new window at current path ('t' for "tab")
bind -n M-t new-window -c "#{pane_current_path}"

# Cycle through windows
bind -n M-[ previous-window
bind -n M-+ previous-window
bind -n M-] next-window
bind -n M-_ next-window

# Prefix | - split window horizontally
bind | split-window -h -c "#{pane_current_path}"

# Prefix - - split window vertically
bind - split-window -v -c "#{pane_current_path}"

# Create new pane in specified direction
bind Left  split-window -c "#{pane_current_path}" -b -h
bind h     split-window -c "#{pane_current_path}" -b -h
bind Down  split-window -c "#{pane_current_path}" -v
bind j     split-window -c "#{pane_current_path}" -v
bind Up    split-window -c "#{pane_current_path}" -b -v
bind k     split-window -c "#{pane_current_path}" -b -v
bind Right split-window -c "#{pane_current_path}" -h
bind l     split-window -c "#{pane_current_path}" -h

# Create new full-width/full-height pane in specified direction
bind C-Left  split-window -c "#{pane_current_path}" -f -b -h
bind C-h     split-window -c "#{pane_current_path}" -f -b -h
bind C-Down  split-window -c "#{pane_current_path}" -f -v
bind C-j     split-window -c "#{pane_current_path}" -f -v
bind C-Up    split-window -c "#{pane_current_path}" -f -b -v
bind C-k     split-window -c "#{pane_current_path}" -f -b -v
bind C-Right split-window -c "#{pane_current_path}" -f -h
bind C-l     split-window -c "#{pane_current_path}" -f -h

# Smart pane switching with awareness of Vim splits.
# From: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-Left if-shell "$is_vim" "send-keys C-Left"  "select-pane -L"
bind-key -n C-h if-shell "$is_vim" "send-keys C-Left"  "select-pane -L"
bind-key -n C-Down if-shell "$is_vim" "send-keys C-Down"  "select-pane -D"
bind-key -n C-j if-shell "$is_vim" "send-keys C-Down"  "select-pane -D"
bind-key -n C-Up if-shell "$is_vim" "send-keys C-Up"  "select-pane -U"
bind-key -n C-k if-shell "$is_vim" "send-keys C-Up"  "select-pane -U"
bind-key -n C-Right if-shell "$is_vim" "send-keys C-Right"  "select-pane -R"
bind-key -n C-l if-shell "$is_vim" "send-keys C-Right"  "select-pane -R"
" Additional parsing on rhs makes backwards compatible backslash escape tricky
" From lacygoill, 2019, https://github.com/tmux/tmux/issues/1827
bind-key -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

bind-key -T copy-mode-vi C-Left select-pane -L
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-Down select-pane -D
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-Up select-pane -U
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-Right select-pane -R
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Swap panes
bind S-Left  select-pane -L \; select-pane -R \; swap-pane -s '!' -t $TMUX_PANE
bind H       select-pane -L \; select-pane -R \; swap-pane -s '!' -t $TMUX_PANE
bind S-Down  select-pane -D \; select-pane -U \; swap-pane -s '!' -t $TMUX_PANE
bind J       select-pane -D \; select-pane -U \; swap-pane -s '!' -t $TMUX_PANE
bind S-Up    select-pane -U \; select-pane -D \; swap-pane -s '!' -t $TMUX_PANE
bind K       select-pane -U \; select-pane -D \; swap-pane -s '!' -t $TMUX_PANE
bind S-Right select-pane -R \; select-pane -L \; swap-pane -s '!' -t $TMUX_PANE
bind L       select-pane -R \; select-pane -L \; swap-pane -s '!' -t $TMUX_PANE

# Rotate panes
bind O       rotate-window -D \; select-pane -t '!'

# Drag to re-order windows in statusline
bind-key -n MouseDrag1Status swap-window -t=

# Prefix < and > - reorder windows in statusline
bind -r < swap-window -t -1
bind -r > swap-window -t +1

# Smart pane zooming with awareness of Vim splits.
bind-key Enter resize-pane -Z

# Provide prefixed mapping for overwritten C-l (clear screen)
bind C-l send-keys 'C-l'

# Toggle full-screen with C-f
full_screen="wmctrl -r :ACTIVE: -b toggle,fullscreen"
bind-key -n C-f run-shell "$full_screen"

# Prefix \, /, [, ] - resize pane 5 rows/columns up, down, left, right
bind -r '\' resize-pane -U 5
bind -r / resize-pane -D 5
bind -r [ resize-pane -L 5
bind -r ] resize-pane -R 7

# Toggle syncing of input across panes
bind = set-window-option synchronize-panes

# Clear text-field when renaming windows and sessions
bind , command-prompt -p "(rename-window '#W')" "rename-window '%%'"
bind '$' command-prompt -p "(rename-session '#S')" "rename-session '%%'"

# The modes {

setw -g clock-mode-colour colour135
setw -g mode-style 'bg=colour238 fg=colour196 bold'

# }
# The panes {

set -g pane-border-style 'bg=colour235 fg=colour238'
set -g pane-active-border-style 'bg=colour236 fg=colour51'

# }
# The statusbar {

set -g status-position bottom
set -g status-style 'bg=colour234 fg=colour137 dim'
set -g status-left ''
set -g status-right '#[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-style 'bg=colour238 fg=colour81 bold'
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-style 'bg=colour235 fg=colour138 none'
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '

setw -g window-status-bell-style 'bg=colour1 fg=colour255 bold'

# }
# The messages {

set -g message-style 'bg=colour166 fg=colour232 bold'

# }

# Fix copy/paste on Mac OS Sierra (v 10.12)
# From joshuamcginnis, 2016, https://github.com/tmux/tmux/issues/543
set -g default-shell $SHELL
if-shell "[[ `uname` -eq 'Darwin' && -x `which reattach-to-user-namespace` ]]" \
    "set -g default-command \"reattach-to-user-namespace -l ${SHELL}\""

